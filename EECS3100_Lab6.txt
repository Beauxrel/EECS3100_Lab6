;*******************************************************************
; main.s
; Author: 
; Date Created: 06/31/2021
; Last Modified: 07/02/2021
; Section Number: 046
; Instructor: Brent Nowlin
; Lab number: 6
; Brief description of the program
; If the switch is presses, the LED toggles at 8 Hz
; Hardware connections
; PE1 is switch input (1 means pressed, 0 means not pressed)
; PE0 is LED output (1 activates external LED on protoboard)
; Overall functionality is similar to Lab 5, with three changes:
; 1) Initialize SysTick with RELOAD 0x00FFFFFF
; 2) Add a heartbeat to PF2 that toggles every time through loop
; 3) Add debugging dump of input, output, and time
; Operation
; 1) Make PE0 an output and make PE1 an input.
; 2) The system starts with the LED on (make PE0 =1).
; 3) Wait about 62 ms
; 4) If the switch is pressed (PE1 is 1), then toggle the LED
; once, else turn the LED on.
; 5) Steps 3 and 4 are repeated over and over
;*******************************************************************
GPIO_PORTE_DATA_R EQU 0x400243FC
GPIO_PORTE_DIR_R EQU 0x40024400
GPIO_PORTE_AFSEL_R EQU 0x40024420
GPIO_PORTE_DEN_R EQU 0x4002451C
GPIO_PORTE_AMSEL_R EQU 0x40024528
GPIO_PORTE_PCTL_R EQU 0x4002452C
GPIO_PORTF_DATA_R EQU 0x400253FC
GPIO_PORTF_DIR_R EQU 0x40025400
GPIO_PORTF_AFSEL_R EQU 0x40025420
GPIO_PORTF_DEN_R EQU 0x4002551C
GPIO_PORTF_LOCK_R EQU 0x40025520
GPIO_PORTF_CR_R EQU 0x40025524
GPIO_PORTF_AMSEL_R EQU 0x40025528
GPIO_PORTF_PCTL_R EQU 0x4002552C
SYSCTL_RCGCGPIO_R EQU 0x400FE608
NVIC_ST_CTRL_R EQU 0xE000E010
NVIC_ST_RELOAD_R EQU 0xE000E014
NVIC_ST_CURRENT_R EQU 0xE000E018
NVIC_ST_CTRL_COUNT EQU 0x00010000 ; Count flag
NVIC_ST_CTRL_CLK_SRC EQU 0x00000004 ; Clock Source
NVIC_ST_CTRL_INTEN EQU 0x00000002 ; Interrupt enable
NVIC_ST_CTRL_ENABLE EQU 0x00000001 ; Counter mode
NVIC_ST_RELOAD_M EQU 0x00FFFFFF ; Counter load value
;SIZE EQU 50
PE0 EQU 0x40024004
PE1 EQU 0x40024008
PF2 EQU 0x40025010
IMPORT TExaS_Init

THUMB
AREA DATA, ALIGN=4
SIZE EQU 50
DataBuffer SPACE SIZE*4
TimeBuffer SPACE SIZE*4
DataPt SPACE 4
TimePt SPACE 4
DumpTruck SPACE 4

ALIGN
AREA |.text|, CODE, READONLY, ALIGN=2
 PRESERVE8
 THUMB
 EXPORT Start
Start
;===================TExaS_Init function========================
 BL TExaS_Init ; voltmeter, scope on PD3
;=================================================================================
;===================PORT F INITIALIZE=============================================
;=================================================================================
;===================Clock Enable===============================
 LDR R0, =SYSCTL_RCGCGPIO_R ; set clock for PortF
MOV R1, #0x20
 STR R1, [R0]
;===================Delay======================================
 NOP
 NOP
;===================Lock======================================
LDR R0, =GPIO_PORTF_LOCK_R
LDR R1, =0x4C4F434B
STR R1, [R0]
;===================CR======================================
LDR R0, =GPIO_PORTF_CR_R
MOV R1, #0x04
STR R1, [R0]
;===================AMSEL======================================
 LDR R0, =GPIO_PORTF_AMSEL_R ; clear amsel for normal operation
 MOV R1, #0x00
 STR R1, [R0]
;===================Direction==================================
 LDR R0, =GPIO_PORTF_DIR_R ; set PF2 as output
 MOV R1, #0x04
 STR R1, [R0]
;===================Analog=====================================
 LDR R0, =GPIO_PORTF_AFSEL_R ; disable analog functionality
 MOV R1, #0x00
 STR R1, [R0]
;===================Digital-Enable=============================
 LDR R0, =GPIO_PORTF_DEN_R ; enable digital I/O on PF2
MOV R1, #0x04
 STR R1, [R0]
;===================PCTL=======================================
 LDR R0, =GPIO_PORTF_PCTL_R ; clear PCTL for PF
 MOV R1, #0x00
 STR R1, [R0]
;=================================================================================
;===================PORT E INITIALIZE=============================================
;=================================================================================
;===================Clock Enable===============================
 LDR R0, =SYSCTL_RCGCGPIO_R ; set clock for PortE
 LDR R2, [R0]
MOV R1, #0x10
ORR R1, R2
 STR R1, [R0]
;===================Delay======================================
 NOP
 NOP
;===================AMSEL======================================
 LDR R0, =GPIO_PORTE_AMSEL_R ; clear amsel for normal operation
 MOV R1, #0x00
 STR R1, [R0]
;===================Direction==================================
 LDR R0, =GPIO_PORTE_DIR_R ; set PE1 as input and PE0 as output
 MOV R1, #0x01
 STR R1, [R0]
;===================Analog=====================================
 LDR R0, =GPIO_PORTE_AFSEL_R ; disable analog functionality
 MOV R1, #0x00
 STR R1, [R0]
;===================Digital-Enable=============================
 LDR R0, =GPIO_PORTE_DEN_R ; enable digital I/O on PE0 and 1
 MOV R1, #0x03
 STR R1, [R0]
;===================PCTL=======================================
 LDR R0, =GPIO_PORTE_PCTL_R ; clear PCTL for PE
 MOV R1, #0x00
 STR R1, [R0]
BL Debug_Init
;==================================================================================
;===================MAIN PROGRAM===================================================
;==================================================================================
 CPSIE I ; TExaS voltmeter, scope runs on interrupts
 LDR R8, =PE0
LDR R9,=DataBuffer
LDR R10,=TimeBuffer
led_on
 LDR R4, [R8] ; load PE3 data into R4
 ORR R4, R4, #0x01 ; clear PE3
 STR R4, [R8] ; store cleared data onto PE3
 B loop
led_toggle
 LDR R4, [R8] ; load PE0 data into R4
EOR R4, R4, #0x01 ; toggle PE0
 STR R4, [R8] ; store toggled data into PE0
 MOV R5, #3875 ; start the delay process
BL Debug_Capture
 B Delay
Delay
 MOVS R2, #0 ; reset count for timer
sub_loop
 ADD R2, #1 ; add 1 to R2 until it hits 255
 CMP R2, #255 ; after hitting 255 subtract 1 from R5
 BNE sub_loop
 SUB R5, #1 ; sub 1 from R5 until it hits zero
 CMP R5, #0
 BNE Delay ; go back until first portion of sub loop has been run 1447 times
 B loop
check ; check that the led is already off
 LDR R4, [R8]
 CMP R4, #0x00
 BEQ led_on
BL Debug_Capture
loop
 BL heartbeat
LDR R0, =PE1
 LDR R7, [R0]
 CMP R7, #0x02
 BNE check ; turns off led if PF4 is not pressed
 B led_toggle; you input output delay
 B loop
;====================================================================================
;=================================HeartBeat=========================================
;====================================================================================
heartbeat
NOP
NOP
LDR R0, =PF2
LDR R1, [R0]
EOR R1, R1, #0x04
STR R1, [R0]
heartbeat_on
MOV R5, #2000 ; start the delay process
heartbeat_delay
 MOVS R2, #0 ;reset count for timer
heartbeat_sub_loop
 ADD R2, #1 ; add 1 to R2 until it hits 255
 CMP R2, #255 ; after hitting 255 subtract 1 from R5
 BNE heartbeat_sub_loop
 SUB R5, #1 ; sub 1 from R5 until it hits zero
 CMP R5, #0
 BNE heartbeat_delay ; go back until first portion of sub loop has been run 1447 times
 BX LR
;====================================================================================
;=================================Debug Init=========================================
;====================================================================================
Debug_Init
PUSH {R0-R3}
Data_Init
MOV R1, #0xFFFFFFFF ;value ;initialize data buffer by filling all values with 0xFFFFFFFF
MOV R2, #0x00 ;count
MOV R3, #0x00
LDR R0,=DataBuffer
DataBuff_loop ;loop through all addresses to fill with 0xFFFFFFFF
CMP R2, #SIZE
BEQ Time_Init
STRR1, [R0]
ADD R2, #0x01
ADD R0, #0x04
B DataBuff_loop
Time_Init ;initialize time buffer
MOV R2, #0x00 ;count
MOV R3, #0x00
LDR R0,=TimeBuffer
TimeBuff_loop ;loop through time buffer to fill with 0xFFFFFFFF
CMP R2, #SIZE
BEQ Point_Init
STRR1, [R0]
ADD R2, #0x01
ADD R0, #0x04
B TimeBuff_loop
Point_Init
LDR R0, =DataBuffer ; Load address of data buffer into R0
LDR R1, =DataPt ; Load address of data pointer into R1
STR R0, [R1] ; Point DataPt to the address of the data buffer
LDR R0, =TimeBuffer ; Load address of time buffer into R0
LDR R1, =TimePt ; Load address of time pointer into R1
STR R0, [R1] ; Point TimePt to the address of the time buffer
SysTick_Init
; disable SysTick during setup
 LDR R1, =NVIC_ST_CTRL_R ; R1 = &NVIC_ST_CTRL_R
 MOV R0, #0 ; R0 = 0
 STR R0, [R1] ; [R1] = R0 = 0
 ; maximum reload value
 LDR R1, =NVIC_ST_RELOAD_R ; R1 = &NVIC_ST_RELOAD_R
 LDR R0, =NVIC_ST_RELOAD_M; ; R0 = NVIC_ST_RELOAD_M
 STR R0, [R1] ; [R1] = R0 = NVIC_ST_RELOAD_M
 ; any write to current clears it
 LDR R1, =NVIC_ST_CURRENT_R ; R1 = &NVIC_ST_CURRENT_R
 MOV R0, #0 ; R0 = 0
 STR R0, [R1] ; [R1] = R0 = 0
 ; enable SysTick with core clock
 LDR R1, =NVIC_ST_CTRL_R ; R1 = &NVIC_ST_CTRL_R
 ; R0 = ENABLE and CLK_SRC bits set
 MOV R0, #(NVIC_ST_CTRL_ENABLE+NVIC_ST_CTRL_CLK_SRC)
 STR R0, [R1] ; [R1] = R0 = (NVIC_ST_CTRL_ENABLE|NVIC_ST_CTRL_CLK_SRC)
POP {R0-R3}
BX LR
;====================================================================================
;=================================Debug Capture======================================
;====================================================================================
Debug_Capture
 PUSH {R4-R8} ;push registers
 LDR R0, =GPIO_PORTE_DATA_R ;load in data and timer addresses
 LDR R1, =NVIC_ST_CURRENT_R
 LDR R2, [R0]
 LDR R3, [R1]
 AND R4,R2,#0x02 ;single out bit 1 of data
 LSL R4,#3 ;shift bit 1 to bit 4
 AND R2,#0x01 ;single out bit 0 of data
 ORR R2,R4 ;recombine the shifted bit 1 and the singled out bit 0
 STR R2,[R9],#4 ;store values into buffers
 STR R3,[R10],#4
LDR R8, =0x200000F8
CMP R8, R9 ;reset indexes of buffers when they are full
BEQ Reset
 POP {R4-R8}
BX LR
;====================================================================================
;=================================Reset==============================================
;====================================================================================
Reset
PUSH {R4-R8}
LDR R9, =DataBuffer ; Load address of data buffer into R0
LDR R10, =TimeBuffer ; Load address of time buffer into R0
POP {R4-R8}
BX LR
 ALIGN ; make sure the end of this section is aligned
 END ; end of file
